<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Language Comparison on Chapel Language Blog</title>
    <link>https://chapel-lang.org/blog/tags/language-comparison/</link>
    <description>Recent content in Language Comparison on Chapel Language Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/language-comparison/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Navier-Stokes in Chapel — Distributed Cavity-Flow Solver</title>
      <link>https://chapel-lang.org/blog/posts/bns4/</link>
      <pubDate>Thu, 14 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://chapel-lang.org/blog/posts/bns4/</guid>
      <description>Writing a distributed and parallel Navier-Stokes solver in Chapel, with an MPI performance comparison</description>
    </item>
    <item>
      <title>Parallel Processing of a Billion Rows of Data in Chapel</title>
      <link>https://chapel-lang.org/blog/posts/1brc/</link>
      <pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://chapel-lang.org/blog/posts/1brc/</guid>
      <description>A Chapel Implementation of the One Billion Row Challenge</description>
    </item>
    <item>
      <title>Memory Safety in Chapel</title>
      <link>https://chapel-lang.org/blog/posts/memory-safety/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://chapel-lang.org/blog/posts/memory-safety/</guid>
      <description>A description of how Chapel&amp;rsquo;s features for memory safety strike a balance between productivity and performance, with comparisons to other languages</description>
    </item>
    <item>
      <title>Navier-Stokes in Chapel — 2D Simulations and Performance</title>
      <link>https://chapel-lang.org/blog/posts/bns2/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://chapel-lang.org/blog/posts/bns2/</guid>
      <description>An exploration of Chapel&amp;rsquo;s scientific computing capabilities using the CFD Python Tutorial and a C++/OpenMP performance comparison</description>
    </item>
    <item>
      <title>Navier-Stokes in Chapel — Introduction</title>
      <link>https://chapel-lang.org/blog/posts/bns1/</link>
      <pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://chapel-lang.org/blog/posts/bns1/</guid>
      <description>A starting point for applying Chapel to scientific computing problems using the CFD Python tutorial.</description>
    </item>
    <item>
      <title>Comparing Standard Library Sorts: The Impact of Parallelism</title>
      <link>https://chapel-lang.org/blog/posts/std-sort-performance/</link>
      <pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://chapel-lang.org/blog/posts/std-sort-performance/</guid>
      <description>This blog post compares the performance of standard library sort routines in several programming languages.</description>
    </item>
  </channel>
</rss>
