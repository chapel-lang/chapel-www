.. default-domain:: chpl

.. module:: OS
   :synopsis: The ``OS`` module provides definitions matching operating system

OS
==
**Usage**

.. code-block:: chapel

   use OS;


or

.. code-block:: chapel

   import OS;

**Submodules**

.. toctree::
   :maxdepth: 1
   :glob:

   OS/*


The ``OS`` module provides definitions matching operating system
interfaces.

This module provides Chapel declarations for the constants, types,
and functions defined by various operating systems' programmatic
interfaces.  It is not complete for any operating system, but does
define those things that have been needed so far in implementing
other Chapel modules and user programs.  It is expected to grow as
needed.  In all respects (naming, capitalization, types, semantics)
the symbols defined here should match their corresponding operating
system definitions to the extent Chapel can do so.  For documentation
on these symbols, please see the operating system manual pages.



.. type:: type errorCode

.. class:: SystemError : Error

   
   :class:`SystemError` is a base class for :class:`Errors.Error` s
   generated from ``errorCode``. It provides factory methods to create
   different subtypes based on the ``errorCode`` that is passed.
   
   


   .. attribute:: var err: errorCode

   .. attribute:: var details: string

   .. method:: proc init(err: errorCode, details: string = "")

   .. method:: override proc message()

      
      Provides a formatted string output for :class:`SystemError`, generated
      from the internal ``err`` and the ``details`` string.
      

   .. method:: proc type fromSyserr(err: errorCode, details: string = "")

      
      Return the matching :class:`SystemError` subtype for a given
      ``errorCode``, with an optional string containing extra details.
      
      :arg err: the errorCode to generate from
      :arg details: extra information to include with the error
      

      .. warning::

         'SystemError.fromSyserr' is deprecated. Please use 'createSystemError' instead.

   .. method:: proc type fromSyserr(err: int, details: string = "")

      
      Return the matching :class:`SystemError` subtype for a given error number,
      with an optional string containing extra details.
      
      :arg err: the number to generate from
      :arg details: extra information to include with the error
      

      .. warning::

         'SystemError.fromSyserr' is deprecated. Please use 'createSystemError' instead.

.. function:: proc createSystemError(err: errorCode, details: string = "")

   
   Return the matching :class:`SystemError` subtype for a given ``errorCode``,
   with an optional string containing extra details.
   
   :arg err: the errorCode to generate from
   :arg details: extra information to include with the error
   

.. function:: proc createSystemError(err: int, details: string = "")

   
   Return the matching :class:`SystemError` subtype for a given error number,
   with an optional string containing extra details.
   
   :arg err: the number to generate from
   :arg details: extra information to include with the error
   

.. class:: BlockingIoError : SystemError

   
   :class:`BlockingIoError` is the subclass of :class:`SystemError`
   corresponding to :const:`~POSIX.EAGAIN`, :const:`~POSIX.EALREADY`,
   :const:`~POSIX.EWOULDBLOCK`, and :const:`~POSIX.EINPROGRESS`.
   


   .. method:: proc init(details: string = "", err: errorCode = EWOULDBLOCK: errorCode)

.. class:: ChildProcessError : SystemError

   
   :class:`ChildProcessError` is the subclass of :class:`SystemError`
   corresponding to :const:`~POSIX.ECHILD`.
   


   .. method:: proc init(details: string = "", err: errorCode = ECHILD: errorCode)

.. class:: ConnectionError : SystemError

   
   :class:`ConnectionError` is the subclass of :class:`SystemError` that
   serves as the base class for all system errors regarding connections.
   


   .. method:: proc init(err: errorCode, details: string = "")

.. class:: BrokenPipeError : ConnectionError

   
   :class:`BrokenPipeError` is the subclass of :class:`ConnectionError`
   corresponding to :const:`~POSIX.EPIPE` and :const:`SysBasic.ESHUTDOWN`.
   


   .. method:: proc init(details: string = "", err: errorCode = EPIPE: errorCode)

.. class:: ConnectionAbortedError : ConnectionError

   
   :class:`ConnectionAbortedError` is the subclass of :class:`ConnectionError`
   corresponding to :const:`~POSIX.ECONNABORTED`.
   


   .. method:: proc init(details: string = "", err: errorCode = ECONNABORTED: errorCode)

.. class:: ConnectionRefusedError : ConnectionError

   
   :class:`ConnectionRefusedError` is the subclass of :class:`ConnectionError`
   corresponding to :const:`~POSIX.ECONNREFUSED`.
   


   .. method:: proc init(details: string = "", err: errorCode = ECONNREFUSED: errorCode)

.. class:: ConnectionResetError : ConnectionError

   
   :class:`ConnectionResetError` is the subclass of :class:`ConnectionError`
   corresponding to :const:`~POSIX.ECONNRESET`.
   


   .. method:: proc init(details: string = "", err: errorCode = ECONNRESET: errorCode)

.. class:: FileExistsError : SystemError

   
   :class:`FileExistsError` is the subclass of :class:`SystemError`
   corresponding to :const:`~POSIX.EEXIST`.
   


   .. method:: proc init(details: string = "", err: errorCode = EEXIST: errorCode)

.. class:: FileNotFoundError : SystemError

   
   :class:`FileNotFoundError` is the subclass of :class:`SystemError`
   corresponding to :const:`~POSIX.ENOENT`.
   


   .. method:: proc init(details: string = "", err: errorCode = ENOENT: errorCode)

.. class:: InterruptedError : SystemError

   
   :class:`InterruptedError` is the subclass of :class:`SystemError`
   corresponding to :const:`~POSIX.EINTR`.
   


   .. method:: proc init(details: string = "", err: errorCode = EINTR: errorCode)

.. class:: IsADirectoryError : SystemError

   
   :class:`IsADirectoryError` is the subclass of :class:`SystemError`
   corresponding to :const:`~POSIX.EISDIR`.
   


   .. method:: proc init(details: string = "", err: errorCode = EISDIR: errorCode)

.. class:: NotADirectoryError : SystemError

   
   :class:`NotADirectoryError` is the subclass of :class:`SystemError`
   corresponding to :const:`~POSIX.ENOTDIR`.
   


   .. method:: proc init(details: string = "", err: errorCode = ENOTDIR: errorCode)

.. class:: PermissionError : SystemError

   
   :class:`PermissionError` is the subclass of :class:`SystemError`
   corresponding to :const:`~POSIX.EACCES` and :const:`~POSIX.EPERM`.
   


   .. method:: proc init(details: string = "", err: errorCode = EPERM: errorCode)

.. class:: ProcessLookupError : SystemError

   
   :class:`ProcessLookupError` is the subclass of :class:`SystemError`
   corresponding to :const:`~POSIX.ESRCH`.
   


   .. method:: proc init(details: string = "", err: errorCode = ESRCH: errorCode)

.. class:: TimeoutError : SystemError

   
   :class:`TimeoutError` is the subclass of :class:`SystemError` corresponding
   to :const:`~POSIX.ETIMEDOUT`.
   


   .. method:: proc init(details: string = "", err: errorCode = ETIMEDOUT: errorCode)

.. class:: IoError : SystemError

   
   :class:`IoError` is the subclass of :class:`SystemError` that serves as the
   base class for all errors regarding inputs and their formatting.
   They are typically not directly generated by the OS, but they are
   used and emitted by the IO module.
   


   .. method:: proc init(err: errorCode, details: string = "")

.. class:: EofError : IoError

   
   :class:`EofError` is the subclass of :class:`IoError` corresponding to
   :const:`SysBasic.EEOF`.
   


   .. method:: proc init(details: string = "", err: errorCode = EEOF: errorCode)

.. class:: UnexpectedEofError : IoError

   
   :class:`UnexpectedEofError` is the subclass of :class:`IoError`
   corresponding to :const:`SysBasic.ESHORT`.
   


   .. method:: proc init(details: string = "", err: errorCode = ESHORT: errorCode)

.. class:: BadFormatError : IoError

   
   :class:`BadFormatError` is the subclass of :class:`IoError` corresponding
   to :const:`SysBasic.EFORMAT`.
   


   .. method:: proc init(details: string = "", err: errorCode = EFORMAT: errorCode)

.. function:: proc ioerror(error: errorCode, msg: string, path: string, offset: int(64)) throws

   Create and throw a :class:`SystemError` if an error occurred, formatting a
   useful message based on the provided arguments. Do nothing if the error
   argument does not indicate an error occurred.
   
   :arg error: the error code
   :arg msg: extra information to include in the thrown error
   :arg path: optionally, a path to include in the thrown error
   :arg offset: optionally, an offset to include in the thrown error
   
   :throws SystemError: A subtype is thrown when the error argument
                        indicates an error occurred
   

.. function:: proc ioerror(errstr: string, msg: string, path: string, offset: int(64)) throws

   Create and throw an :class:`IoError` and include a formatted message
   based on the provided arguments.
   
   :arg errstr: the error string
   :arg msg: extra information to print after the error description
   :arg path: a path to print out that is related to the error
   :arg offset: an offset to print out that is related to the error
   
   :throws IoError: always throws an IoError
   

.. function:: proc errorToString(error: errorCode): string

   Convert a errorCode code to a human-readable string describing the error.
   
   :arg error: the error code
   :returns: a string describing the error
   

