.. default-domain:: chpl

.. module:: Reflection
   :synopsis: Support for reflecting about properties of a Chapel program's code.

Reflection
==========
**Usage**

.. code-block:: chapel

   use Reflection;


or

.. code-block:: chapel

   import Reflection;

Support for reflecting about properties of a Chapel program's code.

Functions for reflecting about language elements, such as fields,
functions, and methods.

For reflecting about aspects of the compilation process, see
:mod:`ChplConfig`.

.. function:: proc getNumFields(type t) param: int

   Return the number of fields in a class or record as a param.
   The count of fields includes types and param fields.
   

.. function:: proc numFields(type t) param: int

   .. warning::

      'numFields' is deprecated - please use 'getNumFields' instead

   Return the number of fields in a class or record as a param.
   The count of fields includes types and param fields.
   

.. function:: proc getFieldName(type t, param idx: int) param: string

   Get the name of the field at `idx` in a class or record.
   Causes a compilation error if `idx` is not in 0..<getNumFields(t).
   
   :arg t: a class or record type
   :arg idx: which field to get the name of
   :returns: the name of the field, as a param string
   

.. function:: proc getField(const ref obj: ?t, param idx: int) param where idx >= 0 && idx < getNumFields(t) && isParam(__primitive("field by num", obj, idx + 1))

   Get the field at `idx` in a class or record. When the field at `idx`
   is a `param`, this overload will be chosen to return a `param`.
   Causes a compilation error if `idx` is not in 0..<getNumFields(t).
   
   :arg obj: a class or record
   :arg idx: which field to get
   :returns: the `param` that field represents

.. function:: proc getField(const ref obj: ?t, param idx: int) type where idx >= 0 && idx < getNumFields(t) && isType(__primitive("field by num", obj, idx + 1))

   Get the field at `idx` in a class or record. When the field at `idx`
   is a `type` variable, this overload will be chosen to return a type.
   Causes a compilation error if `idx` is not in 0..<getNumFields(t).
   
   :arg obj: a class or record
   :arg idx: which field to get
   :returns: the type that field represents

.. function:: proc getField(const ref obj: ?t, param idx: int) const ref

   Get the field at `idx` in a class or record.
   Causes a compilation error if `idx` is not in 0..<getNumFields(t).
   
   :arg obj: a class or record
   :arg idx: which field to get
   :returns: a const reference to that field.
   

.. function:: proc getField(const ref obj: ?t, param name: string) param where getFieldIndex(t, name) != -1 && isParam(getField(obj, getFieldIndex(t, name)))

   Get a field in a class or record by name. When the named
   field is a `param`, this overload will be chosen to return a
   `param`. Will generate a compilation error if a field named
   `name` is not found.
   
   :arg obj: a class or record
   :arg name: the name of a field
   :returns: the `param` that field represents
   

.. function:: proc getField(const ref obj: ?t, param name: string) type where getFieldIndex(t, name) != -1 && isType(getField(obj, getFieldIndex(t, name)))

   Get a field in a class or record by name. When the named
   field is a `type` variable, this overload will be chosen to
   return a type. Will generate a compilation error if a field
   named `name` is not found.
   
   :arg obj: a class or record
   :arg name: the name of a field
   :returns: the type that field represents
   

.. function:: proc getField(const ref obj: ?t, param name: string) const ref

   Get a field in a class or record by name.
   Will generate a compilation error if a field named `name`
   is not found.
   
   :arg obj: a class or record
   :arg name: the name of a field
   :returns: a const reference to that field.
   

.. function:: proc getFieldRef(ref x: ?t, param i: int) ref

   .. warning::

      'getFieldRef' is unstable

   Get a mutable ref to the ith field in a class or record.
   Causes a compilation error if `i` is not in 0..<getNumFields(t)
   or if the argument is not mutable.
   
   :arg x: a class or record
   :arg i: which field to get
   :returns: a mutable reference to that field.
   

.. function:: proc getFieldRef(ref x: ?t, param s: string) ref

   .. warning::

      'getFieldRef' is unstable

   Get a mutable ref to a field in a class or record by name.
   Will generate a compilation error if a field with that name
   is not found or if the class or record is not mutable.
   
   :arg x: a class or record
   :arg s: the name of a field
   :returns: a mutable reference to that field.
   

.. function:: proc getFieldIndex(type t, param name: string) param: int

   Get the index of a field named `name` in a class or record type `t`,
   or ``-1`` if the field `name` is not found.
   
   :arg t: a class or record type
   :arg name: the name of a field
   :returns: an index usable in :proc:`getField`, or ``-1`` if the field
             was not found.
   

.. function:: proc hasField(type t, param name: string) param: bool

   Returns ``true`` if a class or record has a field named `name`,
   or ``false`` otherwise.
   
   :arg t: a class or record type
   :arg name: the name of a field
   :returns: ``true`` if the field is present.
   

.. function:: proc isFieldBound(type t, param idx: int) param: bool

   .. warning::

      'isFieldBound' is unstable - consider using 'T.fieldName != ?' syntax instead

   Returns ``true`` if the field at `idx` has been instantiated in a given
   class or record type `t`.
   
   :arg t: a class or record type
   :arg idx: which field to query
   :returns: ``true`` if the field is instantiated

.. function:: proc isFieldBound(type t, param name: string) param: bool

   .. warning::

      'isFieldBound' is unstable - consider using 'T.fieldName != ?' syntax instead

   Returns ``true`` if the field named `name` has been instantiated in a
   given class or record type `t`.
   
   :arg t: a class or record type
   :arg name: the name of a field
   :returns: ``true`` if the field is instantiated

.. function:: proc canResolve(param fname: string) param: bool

   .. warning::

      The 'canResolve...' family of procedures are unstable

   Returns ``true`` if a function named `fname` taking no arguments
   could be called in the current scope.
   

.. function:: proc canResolve(param fname: string, args ...) param: bool

   .. warning::

      The 'canResolve...' family of procedures are unstable

   Returns ``true`` if a function named `fname` taking the arguments in
   `args` could be called in the current scope.
   

.. function:: proc canResolveMethod(obj, param fname: string) param: bool

   .. warning::

      The 'canResolve...' family of procedures are unstable

   Returns ``true`` if a method named `fname` taking no arguments
   could be called on `obj` in the current scope.
   

.. function:: proc canResolveMethod(obj, param fname: string, args ...) param: bool

   .. warning::

      The 'canResolve...' family of procedures are unstable

   Returns ``true`` if a method named `fname` taking the arguments in
   `args` could be called on `obj` in the current scope.
   

.. function:: proc canResolveTypeMethod(type t, param fname: string) param: bool

   .. warning::

      The 'canResolve...' family of procedures are unstable

   Returns ``true`` if a type method named `fname` taking no
   arguments could be called on type `t` in the current scope.
   

.. function:: proc canResolveTypeMethod(type t, param fname: string, args ...) param: bool

   .. warning::

      The 'canResolve...' family of procedures are unstable

   Returns ``true`` if a type method named `fname` taking the
   arguments in `args` could be called on type `t` in the current scope.
   

.. function:: proc getLineNumber() param: int

   Returns the line number of the call to this function. 

.. function:: proc getFileName() param: string

   Returns the file name this function was called from. 

.. function:: proc getRoutineName() param: string

   Returns the name of the function this function was called from. 

.. function:: proc getModuleName() param: string

   Returns the name of the module this function was called from. 

