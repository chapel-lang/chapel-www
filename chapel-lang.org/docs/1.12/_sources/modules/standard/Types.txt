.. default-domain:: chpl

.. module:: Types
   :synopsis: Functions related to predefined types.

Module: Types
=============

Functions related to predefined types.

This is an automatic module, so these functions are available
to all Chapel programs.

.. function:: proc isType(e) param

   Returns `true` if the argument is a type. 

.. function:: proc isParam(e) param

   Returns `true` if the argument is a param. 

.. function:: proc isPrimitiveType(type t) param

   
   Returns `true` if the type `t` is a primitive type,
   as defined by the language specification.

.. function:: proc isNumericType(type t) param

   
   Returns `true` if the type `t` is one the following types, of any width:
   `int`, `uint`, `real`, `imag`, `complex`.

.. function:: proc isIntegralType(type t) param

   
   Returns `true` if the type `t` is one the following types, of any width:
   `int`, `uint`.

.. function:: proc isFloatType(type t) param

   
   Returns `true` if the type `t` is one the following types, of any width:
   `real`, `imag`.

.. function:: proc isVoidType(type t) param

.. function:: proc isBoolType(type t) param

.. function:: proc isIntType(type t) param

.. function:: proc isUintType(type t) param

.. function:: proc isEnumType(type t) param

.. function:: proc isComplexType(type t) param

.. function:: proc isRealType(type t) param

.. function:: proc isImagType(type t) param

.. function:: proc isStringType(type t) param

   
   Each of the above functions returns `true` if its argument is
   a corresponding type.
   The argument must be a type.

.. function:: proc isPrimitive(e) param

   
   Returns `true` if the argument is a primitive type,
   as defined by the language specification, or a value of a primitive type.

.. function:: proc isNumeric(e) param

   
   Returns `true` if the argument is one the following types, of any width:
   `int`, `uint`, `real`, `imag`, `complex`, or a value of such a type.

.. function:: proc isIntegral(e) param

   
   Returns `true` if the argument is one the following types, of any width:
   `int`, `uint`, or a value of such a type.

.. function:: proc isFloat(e) param

   
   Returns `true` if the argument is one the following types, of any width:
   `real`, `imag`, or a value of such a type.

.. function:: proc isBool(e) param

.. function:: proc isInt(e) param

.. function:: proc isUint(e) param

.. function:: proc isReal(e) param

.. function:: proc isImag(e) param

.. function:: proc isComplex(e) param

.. function:: proc isString(e) param

.. function:: proc isEnum(e) param

.. function:: proc isTuple(e) param

.. function:: proc isHomogeneousTuple(e: _tuple) param

.. function:: proc isClass(e) param

.. function:: proc isRecord(e) param

.. function:: proc isUnion(e) param

.. function:: proc isRange(e) param

.. function:: proc isDmap(e) param

.. function:: proc isDomain(e) param

.. function:: proc isArray(e) param

.. function:: proc isSync(e) param

.. function:: proc isSingle(e) param

.. function:: proc isAtomic(e) param

.. function:: proc isRefIter(e) param

   
   Each of the above functions returns `true` if its argument is
   a corresponding type or a value of such a type.

.. function:: proc isSubtype(type sub, type super) param

   Returns `true` if the type `sub` is a subtype of the type `super`. 

.. function:: proc isProperSubtype(type sub, type super) param

   Returns `true` if the type `sub` is a subtype of the type `super`
   and is not `super`. 

.. function:: proc numBits(type t) param

   
   Returns the number of bits used to store the values of type `t`.
   This is available for all numeric types, fixed-width `bool` types,
   and ``enum`` types.
   It is not available for default-width `bool`.

.. function:: proc numBytes(type t) param

   
   Returns the number of bytes used to store the values of type `t`.
   This is available for all numeric types, fixed-width `bool` types,
   and ``enum`` types.
   It is not available for default-width `bool`.

.. function:: proc min(type t) param

   
   Returns the minimum value the type `t` can store.
   `t` can be one of the following types, of any width:
   `bool`, `int`, `uint`, `real`, `imag`, `complex`.
   When `t` is a `bool` type, it returns `false`.
   When `t` is `real`, `imag`, or `complex` type,
   it is a non-``param`` function.

.. function:: proc max(type t) param

   
   Returns the minimum value the type `t` can store.
   `t` can be one of the following types, of any width:
   `bool`, `int`, `uint`, `real`, `imag`, `complex`.
   When `t` is a `bool` type, it returns `false`.
   When `t` is a `real`, `imag`, or `complex` type,
   it is a non-``param`` function.

.. method:: proc integral.safeCast(type T): T

   
   Returns `this`, cast to the type `T`.
   Generates a run-time error if `this` cannot be represented by `T`,
   for example ``(-1).safeCast(uint)`` or ``256.safeCast(uint(8))``.
   
   This method performs the minimum number of runtime checks.
   For example, when casting from `uint(8)` to `uint(64)`,
   no checks at all will be done.

