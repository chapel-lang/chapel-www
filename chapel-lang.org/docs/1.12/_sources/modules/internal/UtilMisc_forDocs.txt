.. default-domain:: chpl

.. module:: UtilMisc_forDocs
   :synopsis: Additional utilities

Misc Functions
==============


Additional utilities


.. function:: proc compilerError(param x: c_string ...?n, param errorDepth: int)

.. function:: proc compilerError(param x: c_string ...?n)

   
   These two functions are used primarily within system modules to signal
   a compile time error.  The first version accepts a param int as the
   last argument; this value is used to control the depth of an error
   stack trace
   

.. function:: proc compilerWarning(param x: c_string ...?n, param errorDepth: int)

.. function:: proc compilerWarning(param x: c_string ...?n)

   Similar to compilerError() but generate a warning rather than an error 

.. function:: proc compilerAssert(param test: bool)

   
   This function is used primarily within system modules to test a compile
   time property. An error message is generated if the property is false
   
   :arg test: the param value to be tested
   

.. function:: proc compilerAssert(param test: bool, param arg1: integral)

   
   This function is used primarily within system modules to test a compile
   time property. An error message is generated if the property is false.
   The second parameter, which must be integral, is used to control the
   depth of the error stack traceback.
   
   :arg test: the param value to be tested
   

.. function:: proc compilerAssert(param test: bool, param arg1)

   
   This function of two arguments will be used if the second parameter is not
   integral.  If the first parameter is false, then the second parameter is
   included in the error message that is generated
   
   :arg test: the param value to be tested
   

.. function:: proc compilerAssert(param test: bool, param arg1, param arg2)

.. function:: proc compilerAssert(param test: bool, param arg1, param arg2, param arg3)

.. function:: proc compilerAssert(param test: bool, param arg1, param arg2, param arg3, param arg4)

.. function:: proc compilerAssert(param test: bool, param arg1, param arg2, param arg3, param arg4, param arg5)

   
   An extended set of functions that provides additional information for the error
   message. A current limitation in the handling of tuples of parameters prevents
   the use of a variable number of arguments
   
   :arg test: the param value to be tested
   

.. function:: proc compilerAssert(param test: bool, param arg1, param arg2, param arg3, param arg4, param arg5, argrest ...)

   
   This variation accepts any number of arguments.  The first five additional parameters are
   included if an error message is generated and then there is an indication that there are
   additional parameters.
   
   :arg test: the param value to be tested
   

.. function:: proc compilerAssert(param test: bool, param arg1, param arg2, param arg3, param arg4, param arg5, param arg6: integral)

   
   This variation accepts the value to be tested, precisely 5 values to be included in the
   error message, and finally an integral value that controls the depth of the error stack.
   
   :arg test: the param value to be tested
   

.. function:: proc compilerAssert(param test: bool, param arg1, param arg2, param arg3, param arg4, param arg5, argrest ..., param arglast: integral)

   
   This variation accepts any number of arguments but detects that the final argument is integral.
   In this version the final argument is treated as an errorDepth as for compilerWarning() and
   compilerError()
   
   :arg test: the param value to be tested
   

.. function:: proc min(x, y)

.. function:: proc min(x, y, z ...?k)

   Compute the minimum value of 2 or more arguments 

.. function:: proc max(x, y)

.. function:: proc max(x, y, z ...?k)

   Compute the maximum value of 2 or more arguments 

.. function:: proc exit(status: int)

   
   Exit the program
   
   :arg status: The exit code for the program
   

