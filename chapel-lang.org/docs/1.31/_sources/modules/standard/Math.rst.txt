.. default-domain:: chpl

.. module:: Math
   :synopsis: This module provides less frequently used mathematical constants and functions.

Math
====
**Usage**

.. code-block:: chapel

   use Math;


or

.. code-block:: chapel

   import Math;



This module provides less frequently used mathematical constants and functions.

It includes wrappers for many of the constants and functions in
the C Math library, which is part of the C Language Standard (ISO/IEC 9899)
as described in Section 7.12.  Please consult that standard for an
authoritative description of the expected properties of those constants and
routines.

In general, where the C math library provides a *double* and a *float* version
of a function, the float version has a suffix 'f'.  In the Chapel interface,
the suffix is dropped, and the type of the operand determines which version is
called -- according to the usual function overloading and resolution rules.
Normally, the result has the same precision
as the argument(s).  Please consult the C standard for specifics.

Error Handling -- At present, Chapel does not provide control over error
handling in the Math module.  The default behavior is as if the macro
``math_errhandling`` is set to 0: Given erroneous input at run-time,
all math functions will return an implementation-defined value; no
exception will be generated.

.. _math-constants:

Constants
---------
:var:`e`
:var:`log2_e`
:var:`log10_e`
:var:`ln_2`
:var:`ln_10`
:var:`pi`
:var:`half_pi`
:var:`quarter_pi`
:var:`recipr_pi`
:var:`twice_recipr_pi`
:var:`twice_recipr_sqrt_pi`
:var:`sqrt_2`
:var:`recipr_sqrt_2`

.. _math-trigonometry:

Trigonometric Functions
-----------------------
:proc:`acos`
:proc:`acosh`
:proc:`asin`
:proc:`asinh`
:proc:`atan`
:proc:`atan2`
:proc:`atanh`
:proc:`cos`
:proc:`cosh`
:proc:`sin`
:proc:`sinh`
:proc:`tan`
:proc:`tanh`

.. _math-log:

Log Functions
-------------
:proc:`log`
:proc:`log10`
:proc:`log1p`
:proc:`logBasePow2`
:proc:`log2`

.. _math-exponential:

Exponential Functions
---------------------
:proc:`exp`
:proc:`exp2`
:proc:`expm1`
:proc:`ldexp`

.. _math-gamma:

Gamma Functions
---------------
:proc:`lgamma`
:proc:`tgamma`

.. _math-error:

Error Functions
---------------
:proc:`erf`
:proc:`erfc`

.. _math-algorithms:

Algorithms
----------
:proc:`gcd`

.. _math-bessel:

Bessel Functions
----------------
:proc:`j0`
:proc:`j1`
:proc:`jn`
:proc:`y0`
:proc:`y1`
:proc:`yn`


Constant and Function Definitions
---------------------------------


.. data:: param e = 2.7182818284590452354

   e - exp(1) or  the base of the natural logarithm 

.. data:: param log2_e = 1.4426950408889634074

   log2(e) 

.. data:: param log10_e = 0.43429448190325182765

   log10(e) 

.. data:: param ln_2 = 0.69314718055994530942

   log(2) (natural logarithm) 

.. data:: param ln_10 = 2.30258509299404568402

   log(10) (natural logarithm) 

.. data:: param pi = 3.14159265358979323846

   pi - the circumference/the diameter of a circle 

.. data:: param half_pi = 1.57079632679489661923

   pi/2 

.. data:: param quarter_pi = 0.78539816339744830962

   pi/4 

.. data:: param recipr_pi = 0.31830988618379067154

   1/pi 

.. data:: param twice_recipr_pi = 0.63661977236758134308

   2/pi 

.. data:: param twice_recipr_sqrt_pi = 1.12837916709551257390

   2/sqrt(pi) 

.. data:: param sqrt_2 = 1.41421356237309504880

   sqrt(2) 

.. data:: param recipr_sqrt_2 = 0.70710678118654752440

   1/sqrt(2) 

.. function:: proc acos(x: real(64)): real(64)

   Returns the arc cosine of the argument `x`.
   
   It is an error if `x` is less than -1 or greater than 1.
   

.. function:: proc acos(x: real(32)): real(32)

   Returns the arc cosine of the argument `x`.
   
   It is an error if `x` is less than -1 or greater than 1.
   

.. function:: proc acos(z: complex(64)): complex(64)

   Returns the arc cosine of the argument `z`. 

.. function:: proc acos(z: complex(128)): complex(128)

   Returns the arc cosine of the argument `z`. 

.. function:: proc acosh(x: real(64)): real(64)

   Returns the inverse hyperbolic cosine of the argument `x`.
   
   It is an error if `x` is less than 1.
   

.. function:: proc acosh(x: real(32)): real(32)

   Returns the inverse hyperbolic cosine of the argument `x`.
   
   It is an error if `x` is less than 1.
   

.. function:: proc acosh(z: complex(64)): complex(64)

   Returns the inverse hyperbolic cosine of the argument `z`. 

.. function:: proc acosh(z: complex(128)): complex(128)

   Returns the inverse hyperbolic cosine of the argument `z`. 

.. function:: proc asin(x: real(64)): real(64)

   Returns the arc sine of the argument `x`.
   
   It is an error if `x` is less than -1 or greater than 1.
   

.. function:: proc asin(x: real(32)): real(32)

   Returns the arc sine of the argument `x`.
   
   It is an error if `x` is less than -1 or greater than 1.
   

.. function:: proc asin(z: complex(64)): complex(64)

   Returns the arc sine of the argument `z`. 

.. function:: proc asin(z: complex(128)): complex(128)

   Returns the arc sine of the argument `z`. 

.. function:: proc asinh(x: real(64)): real(64)

   Returns the inverse hyperbolic sine of the argument `x`. 

.. function:: proc asinh(x: real(32)): real(32)

   Returns the inverse hyperbolic sine of the argument `x`. 

.. function:: proc asinh(z: complex(64)): complex(64)

   Returns the inverse hyperbolic sine of the argument `z`. 

.. function:: proc asinh(z: complex(128)): complex(128)

   Returns the inverse hyperbolic sine of the argument `z`. 

.. function:: proc atan(x: real(64)): real(64)

   Returns the arc tangent of the argument `x`. 

.. function:: proc atan(x: real(32)): real(32)

   Returns the arc tangent of the argument `x`. 

.. function:: proc atan(z: complex(64)): complex(64)

   Returns the arc tangent of the argument `z`. 

.. function:: proc atan(z: complex(128)): complex(128)

   Returns the arc tangent of the argument `z`. 

.. function:: proc atan2(y: real(64), x: real(64)): real(64)

   Returns the arc tangent of the ratio of the two arguments.
   
   This is equivalent to
   the arc tangent of `y` / `x` except that the signs of `y`
   and `x` are used to determine the quadrant of the result. 

.. function:: proc atan2(y: real(32), x: real(32)): real(32)

   Returns the arc tangent of the two arguments.
   
   This is equivalent to
   the arc tangent of `y` / `x` except that the signs of `y`
   and `x` are used to determine the quadrant of the result. 

.. function:: proc atanh(x: real(64)): real(64)

   Returns the inverse hyperbolic tangent of the argument `x`.
   
   It is an error if `x` is less than -1 or greater than 1. 

.. function:: proc atanh(x: real(32)): real(32)

   Returns the inverse hyperbolic tangent of the argument `x`.
   
   It is an error if `x` is less than -1 or greater than 1. 

.. function:: proc atanh(z: complex(64)): complex(64)

   Returns the inverse hyperbolic tangent of the argument `z`. 

.. function:: proc atanh(z: complex(128)): complex(128)

   Returns the inverse hyperbolic tangent of the argument `z`. 

.. function:: proc cos(x: real(64)): real(64)

   Returns the cosine of the argument `x`. 

.. function:: proc cos(x: real(32)): real(32)

   Returns the cosine of the argument `x`. 

.. function:: proc cos(z: complex(64)): complex(64)

   Returns the cosine of the argument `z`. 

.. function:: proc cos(z: complex(128)): complex(128)

   Returns the cosine of the argument `z`. 

.. function:: proc cosh(x: real(64)): real(64)

   Returns the hyperbolic cosine of the argument `x`. 

.. function:: proc cosh(x: real(32)): real(32)

   Returns the hyperbolic cosine of the argument `x`. 

.. function:: proc cosh(z: complex(64)): complex(64)

   Returns the hyperbolic cosine of the argument `z`. 

.. function:: proc cosh(z: complex(128)): complex(128)

   Returns the hyperbolic cosine of the argument `z`. 

.. function:: proc erf(x: real(64)): real(64)

   Returns the error function of the argument `x`. 

.. function:: proc erf(x: real(32)): real(32)

   Returns the error function of the argument `x`. 

.. function:: proc erfc(x: real(64)): real(64)

   Returns the complementary error function of the argument.
   This is equivalent to 1.0 - :proc:`erf`\(`x`).
   

.. function:: proc erfc(x: real(32)): real(32)

   Returns the complementary error function of the argument.
   This is equivalent to 1.0 - :proc:`erf`\(`x`).
   

.. function:: proc exp(x: real(64)): real(64)

   Returns the value of the Napierian `e` raised to the power of the
   argument `x`. 

.. function:: proc exp(x: real(32)): real(32)

   Returns the value of the Napierian `e` raised to the power of the
   argument. 

.. function:: proc exp(z: complex(64)): complex(64)

   Returns the value of the Napierian `e` raised to the power of the
   argument. 

.. function:: proc exp(z: complex(128)): complex(128)

   Returns the value of the Napierian `e` raised to the power of the
   argument. 

.. function:: proc exp2(x: real(64)): real(64)

   Returns the value of `2` raised to the power of the argument `x`. 

.. function:: proc exp2(x: real(32)): real(32)

   Returns the value of `2` raised to the power of the argument `x`. 

.. function:: proc expm1(x: real(64)): real(64)

   Returns one less than the value of the Napierian `e` raised to the power
   of the argument `x`. 

.. function:: proc expm1(x: real(32)): real(32)

   Returns one less than the value of the Napierian `e` raised to the power
   of the argument `x`. 

.. function:: proc ldexp(x: real(64), n: int(32)): real(64)

   Multiply by an integer power of 2.
   Returns x * 2**n.
   

.. function:: proc ldexp(x: real(32), n: int(32)): real(32)

.. function:: proc lgamma(x: real(64)): real(64)

   Returns the natural logarithm of the absolute value
   of the gamma function of the argument `x`.
   

.. function:: proc lgamma(x: real(32)): real(32)

   Returns the natural logarithm of the absolute value
   of the gamma function of the argument `x`.
   

.. function:: proc log(x: real(64)): real(64)

   Returns the natural logarithm of the argument `x`.
   
   It is an error if `x` is less than or equal to zero.
   

.. function:: proc log(x: real(32)): real(32)

   Returns the natural logarithm of the argument `x`.
   
   It is an error if `x` is less than or equal to zero.
   

.. function:: proc log(z: complex(64)): complex(64)

   Returns the natural logarithm of the argument `z`. 

.. function:: proc log(z: complex(128)): complex(128)

   Returns the natural logarithm of the argument `z`. 

.. function:: proc log10(x: real(64)): real(64)

   Returns the base 10 logarithm of the argument `x`.
   
   It is an error if `x` is less than or equal to zero.
   

.. function:: proc log10(x: real(32)): real(32)

   Returns the base 10 logarithm of the argument `x`.
   
   It is an error if `x` is less than or equal to zero.
   

.. function:: proc log1p(x: real(64)): real(64)

   Returns the natural logarithm of `x` + 1.
   
   It is an error if `x` is less than or equal to -1.
   

.. function:: proc log1p(x: real(32)): real(32)

   Returns the natural logarithm of `x` + 1.
   
   It is an error if `x` is less than or equal to -1.
   

.. function:: proc logBasePow2(val: int(?w), baseLog2)

   Returns the log to the base `2**baseLog2` of the given `in` value.
   If `baseLog2` is `1`, then returns the log to the base `2`;
   if `baseLog2` is `2`, then returns the log to the base `4`, etc.
   Any fractional part is discarded.
   
   :rtype: `int`
   

.. function:: proc logBasePow2(val: uint(?w), baseLog2)

   Returns the log to the base `2**baseLog2` of the given `in` value.
   If `baseLog2` is `1`, then returns the log to the base `2`;
   if `baseLog2` is `2`, then returns the log to the base `4`, etc.
   Any fractional part is discarded.
   
   :rtype: `int`
   

.. function:: proc log2(x: real(64)): real(64)

   Returns the base 2 logarithm of the argument `x`.
   
   It is an error if `x` is less than or equal to zero.
   

.. function:: proc log2(x: real(32)): real(32)

   Returns the base 2 logarithm of the argument `x`.
   
   It is an error if `x` is less than or equal to zero.
   

.. function:: proc log2(val: int(?w))

   Returns the base 2 logarithm of the argument `x`,
   rounded down.
   
   :rtype: `int`
   
   It is an error if `x` is less than or equal to zero.
   

.. function:: proc log2(val: uint(?w))

   Returns the base 2 logarithm of the argument `x`,
   rounded down.
   
   :rtype: `int`
   
   It is an error if `x` is less than or equal to zero.
   

.. function:: proc sin(x: real(64)): real(64)

   Returns the sine of the argument `x`. 

.. function:: proc sin(x: real(32)): real(32)

   Returns the sine of the argument `x`. 

.. function:: proc sin(z: complex(64)): complex(64)

   Returns the sine of the argument `z`. 

.. function:: proc sin(z: complex(128)): complex(128)

   Returns the sine of the argument `z`. 

.. function:: proc sinh(x: real(64)): real(64)

   Returns the hyperbolic sine of the argument `x`. 

.. function:: proc sinh(x: real(32)): real(32)

   Returns the hyperbolic sine of the argument `x`. 

.. function:: proc sinh(z: complex(64)): complex(64)

   Returns the hyperbolic sine of the argument `z`. 

.. function:: proc sinh(z: complex(128)): complex(128)

   Returns the hyperbolic sine of the argument `z`. 

.. function:: proc tan(x: real(64)): real(64)

   Returns the tangent of the argument `x`. 

.. function:: proc tan(x: real(32)): real(32)

   Returns the tangent of the argument `x`. 

.. function:: proc tan(z: complex(64)): complex(64)

   Returns the tangent of the argument `z`. 

.. function:: proc tan(z: complex(128)): complex(128)

   Returns the tangent of the argument `z`. 

.. function:: proc tanh(x: real(64)): real(64)

   Returns the hyperbolic tangent of the argument `x`. 

.. function:: proc tanh(x: real(32)): real(32)

   Returns the hyperbolic tangent of the argument `x`. 

.. function:: proc tanh(z: complex(64)): complex(64)

   Returns the hyperbolic tangent of the argument `z`. 

.. function:: proc tanh(z: complex(128)): complex(128)

   Returns the hyperbolic tangent of the argument `z`. 

.. function:: proc tgamma(x: real(64)): real(64)

   Returns the absolute value of the gamma function of the argument `x`. 

.. function:: proc tgamma(x: real(32)): real(32)

   Returns the absolute value of the gamma function of the argument `x`. 

.. function:: proc gcd(in a: int, in b: int): int

   Returns the greatest common divisor of the integer argument `a` and
   `b`. 

.. function:: proc j0(x: real(32)): real(32)

   Returns the Bessel function of the first kind of order `0` of `x`. 

.. function:: proc j0(x: real(64)): real(64)

   Returns the Bessel function of the first kind of order `0` of `x`. 

.. function:: proc j1(x: real(32)): real(32)

   Returns the Bessel function of the first kind of order `1` of `x`. 

.. function:: proc j1(x: real(64)): real(64)

   Returns the Bessel function of the first kind of order `1` of `x`. 

.. function:: proc jn(n: int, x: real(32)): real(32)

   Returns the Bessel function of the first kind of order `n` of `x`. 

.. function:: proc jn(n: int, x: real(64)): real(64)

   Returns the Bessel function of the first kind of order `n` of `x`. 

.. function:: proc y0(x: real(32)): real(32)

   Returns the Bessel function of the second kind of order `0` of `x`, where
   `x` must be greater than 0 

.. function:: proc y0(x: real(64)): real(64)

   Returns the Bessel function of the second kind of order `0` of `x`,
   where `x` must be greater than 0 

.. function:: proc y1(x: real(32)): real(32)

   Returns the Bessel function of the second kind of order `1` of `x`,
   where `x` must be greater than 0 

.. function:: proc y1(x: real(64)): real(64)

   Returns the Bessel function of the second kind of order `1` of `x`,
   where `x` must be greater than 0 

.. function:: proc yn(n: int, x: real(32)): real(32)

   Returns the Bessel function of the second kind of order `n` of `x`,
   where `x` must be greater than 0 

.. function:: proc yn(n: int, x: real(64)): real(64)

   Returns the Bessel function of the second kind of order `n` of `x`,
   where `x` must be greater than 0 

