.. default-domain:: chpl

.. module:: StencilDist
   :synopsis: Draft support for stencil computations using a Block-style distribution. 

StencilDist
===========
**Usage**

.. code-block:: chapel

   use StencilDist;


or

.. code-block:: chapel

   import StencilDist;
.. warning::

   StencilDist is unstable and may change in the future

.. record:: stencilDist : writeSerializable

   
   The ``stencilDist`` distribution is an enhanced functionality variant of the
   :mod:`blockDist<BlockDist>` distribution. Both refer to an array partitioned
   into blocks, but ``stencilDist`` will help the user to improve
   performance for stencil computations by reducing the amount of communication
   necessary for array accesses across locales. A ``stencilDist`` array would
   most commonly be used in computations based on a numerical stencil formula.
   For example, solving banded linear equations by the Gauss-Seidel or Jacobi
   method.
   
   Like ``blockDist``, each block in a ``stencilDist`` array is owned by a
   (potentially) different locale. But when communication needs to occur between
   a given block and its set of immediately neighboring or adjacent blocks, the
   more feature-rich ``stencilDist`` is typically the better choice. This is
   because, for any given block, a ``stencilDist`` transparently creates a
   read-only cache of selected array elements from its adjacent blocks,
   specifically those array elements from the band of array elements just
   outside the edge of the locally-owned block. This band of array elements is
   sometimes referred to as a 'halo' or 'overlap region' in other languages
   and technologies, but in this documentation will be referred to as either
   'ghost cells' or more strictly, as 'fluff'.
   
   This approach can  avoid many instances of reading a remote array element
   when performing a stencil computation near the boundary of the current
   locale's chunk of array elements. Note that the user must manually refresh
   these caches after writes by calling the ``updateFluff`` method. The writing
   of array elements and partitioning of indices both behave the same as in a
   block-distributed array.
   
   The ``stencilDist`` initializer is defined as follows:
   
     .. code-block:: chapel
   
       proc stencilDist.init(
         boundingBox: domain(?),
         targetLocales: [] locale  = Locales,
         dataParTasksPerLocale     = // value of  dataParTasksPerLocale      config const,
         dataParIgnoreRunningTasks = // value of  dataParIgnoreRunningTasks  config const,
         dataParMinGranularity     = // value of  dataParMinGranularity      config const,
         param rank                = boundingBox.rank,
         type  idxType             = boundingBox.idxType,
         fluff: rank*idxType       = makeZero(rank),
         periodic: bool            = false)
   
   The ``fluff`` argument indicates the requested number of cached elements in
   each dimension. If an element of ``fluff`` is greater than zero, the user can
   use indices outside of ``boundingBox`` to index into the array. If the domain
   is not strided, you can consider indices for dimension ``i`` to be:
   
   .. code-block:: chapel
   
      boundingBox.dim(i).expand(fluff(i))
   
   If the domain is strided:
   
   .. code-block:: chapel
   
      const bb = boundingBox.dim(i);
      bb.expand(fluff(i) * abs(bb.stride));
   
   The same logic is used when determining the cached index set on each locale,
   except you can imagine ``boundingBox`` to be replaced with the returned
   value from :proc:`~ChapelArray.localSubdomain`.
   
   The ``periodic`` argument indicates whether or not the stencil distribution
   should treat the array as a discrete chunk in a larger space. When enabled,
   the ghost cells outside of ``boundingBox`` will contain values as if the
   array was replicated on all sides of the space. When disabled, the outermost
   ghost cells will be initialized with the default value of the element's type.
   The ``periodic`` functionality is disabled by default.
   
   .. note::
   
      Note that this domain does not currently handle indices outside of
      the expanded bounding box, so a user must manually wrap periodic indices
      themselves.
   
   Iterating directly over a stencil-distributed domain or array will only yield
   indices and elements within the ``boundingBox``.
   
   **Convenience Factory Methods**
   
   It is common for a ``stencilDist``-distributed domain or array to be
   declared using the same indices for both its ``boundingBox`` and its
   index set (as in the example using ``Space`` above).  It is also
   common to not override any of the other defaulted initializer
   arguments.  In such cases, factory procedures can be used for
   convenience and to avoid repetition.
   
   .. code-block:: chapel
   
     use StencilDist;
   
     var BlockDom1 = stencilDist.createDomain({1..5, 1..5});
     var BlockArr1 = stencilDist.createArray({1..5, 1..5}, real);
     var BlockDom2 = stencilDist.createDomain(1..5, 1..5);
     var BlockArr2 = stencilDist.createArray(1..5, 1..5, real);
   
   The helper methods on ``stencilDist`` have the following signatures:
   
   .. function:: proc type stencilDist.createDomain(dom: domain, targetLocales = Locales, fluff, periodic = false)
   
     Create a stencil-distributed domain. The provided domain is used as the
     ``boundingBox``.
   
   .. function:: proc type stencilDist.createDomain(rng: range(?)..., targetLocales = Locales, fluff, periodic = false)
   
     Create a stencil-distributed domain from a series of ranges. The ranges
     are also used to construct the ``boundingBox``.
   
   .. function:: proc type stencilDist.createArray(dom: domain, type eltType, targetLocales = Locales, fluff, periodic = false)
   
     Create a default-initialized, stencil-distributed array whose
     indices match those of the given domain.
   
   .. function:: proc type stencilDist.createArray(rng: range(?)..., type eltType, targetLocales = Locales, fluff, periodic = false)
   
     Create a default-initialized, stencil-distributed array using a
     domain constructed from the series of ranges.
   
   .. function:: proc type stencilDist.createArray(dom: domain, type eltType, initExpr, targetLocales = Locales, fluff, periodic = false)
   
     Create a stencil-distributed array whose indices match those of the
     given domain.
   
     The array's values are initialized using ``initExpr`` which can be any of
     the following:
   
     * a value coercible to ``eltType`` — all elements of the array will be
       assigned with this value
     * an iterator expression with compatible size and type — the array elements
       will be initialized with the values yielded by the iterator
     * an array of compatible size and type — the array will be assigned into
       the distributed array
   
   .. function:: proc type stencilDist.createArray(rng: range(?)..., type eltType, initExpr, targetLocales = Locales, fluff, periodic = false)
   
     Create a stencil-distributed array using a domain constructed from
     the series of ranges.
   
     The array's values are initialized using ``initExpr`` which can be any of
     the following:
   
     * a value coercible to ``eltType`` — all elements of the array will be
       assigned with this value
     * an iterator expression with compatible size and type — the array elements
       will be initialized with the values yielded by the iterator
     * an array of compatible size and type — the array will be assigned into
       the distributed array
   
   .. function:: proc stencilDist.createDomain(dom: domain(?))
   
     Create a stencil-distributed domain over an existing ``blockDist`` by copying
     the index space from the passed domain.
   
   .. function:: proc stencilDist.createDomain(rng: range(?)...)
   
     Create a stencil-distributed domain from a series of ranges over an existing
     ``blockDist``.
   
   
   Note that the ``fluff`` argument in the above methods defaults to a
   tuple of *n* zeros, where *n* is the domain's rank or the number of
   provided ranges.
   
   **Updating the Cached Elements**
   
   Once you have completed a series of writes to the array, you will need to
   call the ``updateFluff`` method to update the cached elements for each
   locale. Here is a simple example:
   
   .. code-block:: chapel
   
     use StencilDist;
   
     const Space = {1..10, 1..10};
     const Dist = new stencilDist(boundingBox=Space, fluff=(1,1));
     const D = Dist.createDomain(Space);
     var A : [D] int;
   
     forall (i,j) in D with (ref A) do
       A[i,j] = i*10 + j;
   
     // At this point, the ghost cell caches are out of date
   
     A.updateFluff();
   
     // ghost cell caches are now up-to-date
   
   After updating, any read from the array should be up-to-date. The
   ``updateFluff`` method does not currently accept any arguments.
   
   **Reading and Writing to Array Elements**
   
   The ``stencilDist`` distribution uses ghost cells as cached
   read-only values from other locales. When reading from a
   stencil-distributed array, the distribution will attempt to read
   from the local ghost cell cache first. If the index is not within the
   cached index set of the current locale, then we default to a remote
   read from the locale on which the element is located.
   
   Any write to array data will be applied to the actual element, the same as if
   you were using a Block-distributed array.
   
   **Modifying Exterior Ghost Cells**
   
   Updating the outermost ghost cells can be useful when working with a periodic
   stencil-distributed array. If your array contains position information, you may
   want to modify the ghost cells to 'wrap' around the physical space correctly.
   
   You can currently do this with the ``boundaries()`` iterator on a
   stencil-distributed array. This iterator yields a tuple where the first component
   is the ghost cell element to be modified, and the second component is a tuple
   indicating the side on which this ghost cell lives. This direction tuple will
   contain values in the range ``-1..1``.
   
   The release benchmark 'miniMD' contains an example of how one might use this
   iterator.
   
   .. warning::
   
     There is a known issue with this iterator where the program will fail to
     compile if the array element is not an array or a class.
   

