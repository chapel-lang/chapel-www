.. default-domain:: chpl

.. module:: LinearAlgebra
   :synopsis: Linear Algebra Module

LinearAlgebra
=============
**Usage**

.. code-block:: chapel

   use LinearAlgebra;

Linear Algebra Module

A high-level interface to linear algebra operations and procedures.

.. note::
  This is an early prototype package module. As a result, interfaces may change
  over the next release.

Compiling with Linear Algebra
-----------------------------

The linear algebra module uses the :mod:`BLAS` module.
In order to compile a Chapel program with this module, be sure
to have a BLAS implementation available on your system. See the :mod:`BLAS`
documentation for further details.


Linear Algebra API
------------------

**Matrix and Vector representation**

Matrices and vectors are represented as Chapel arrays, which means the
convenience constructors provided in this module are not necessary to use this
module's functions. This also means that matrices (2D arrays) and vectors (1D
arrays) will work with any other Chapel library that works with arrays.

.. note::

  This documentation uses the terms `matrix` to refer to `2D arrays`, and
  `vector` to refer to `1D arrays`.

**Indexing**

All functions that return new arrays will return arrays over 0-based indices,
unless otherwise specified.

**Matrix multiplication**

:proc:`dot` is the general matrix multiplication function provided in this module.
This function supports any combination of scalars, vectors (1D arrays), and
matrices (2D arrays). See the :proc:`dot` documentation for more information.

The :proc:`dot` function, along with others may be given a matrix-specific
operator in future releases.

**Row vs Column vectors**

Row and column vectors are both represented as 1D arrays and are
indistinguishable in Chapel. In the :proc:`dot` function, matrix-vector
multiplication assumes a column vector, vector-matrix multiplcation assumes a
row vector, vector-vector multiplication is always treated as an inner-product,
as the function name implies.
An outer product can be computed with the :proc:`outer` function.

**Promotion flattening**

Promotion flattening is an unintended consequence of Chapel's
:ref:`promotion feature <ug-promotion>`, when a multi-dimensional array assignment
gets type-inferred as a 1-dimensional array of the same size, effectively
flattening the array dimensionality. This can result in unexpected behavior in
programs such as this:

.. code-block:: chapel

  var A = Matrix(4, 4),
      B = Matrix(4, 4);
  // A + B is a promoted operation, and C becomes a 1D array
  var C = A + B;
  // This code would then result in an error due to rank mismatch:
  C += A;

To get avoid this, you can avoid relying on inferred-types for new arrays:

.. code-block:: chapel

  var A = Matrix(4, 4),
      B = Matrix(4, 4);
  // C's type is not inferred and promotion flattening is not a problem
  var C: [A.domain] A.eltType = A + B;
  // Works as expected
  C += A;

Alternatively, you can use the LinearAlgebra helper routines, which create
and return a new array:

.. code-block:: chapel

  var A = Matrix(4, 4),
      B = Matrix(4, 4);
  // matPlus will create a new array with an explicit type
  var C = matPlus(A, B);
  // Works as expected
  C += A;

Promotion flattening is not expected to be an issue in future releases.


.. LinearAlgebra Module Future TODOs:
  - Support non-matching domains and eltTypes in matOperations
    - check that eltTypes are coercible
    - check domain shapes are equal
  - Add LinearAlgebra primer
  - Add feature table, comparing to numpy and matlab
  - performance testing
  - Domain maps
    - Distributed array support
    - Sparse support
    - GPU support
  - Support fully native implementations
    - Only use the BLAS/LAPACK version when the libraries are installed
  - Provide MKL BLAS/LAPACK with Chapel installation
    - install with something like: CHPL_EXTRAS=MKL


.. function:: proc Vector(length, type eltType = real)

   Return a vector (1D array) over domain ``{0..#length}``

.. function:: proc Vector(Dom: domain(1), type eltType = real)

   Return a vector (1D array) over domain ``Dom`` 

.. function:: proc Vector(A: [?Dom] ?Atype, type eltType = Atype)

   Return a vector (1D array) with domain and values of ``A`` 

.. function:: proc Vector(x: ?t, Scalars ...?n, type eltType)

   Return a vector (1D array), given 2 or more numeric values
   
   If `type` is omitted, it will be inferred from the first argument

.. function:: proc Matrix(rows, type eltType = real)

   Return a square matrix (2D array) over domain ``{0..#rows, 0..#rows}``

.. function:: proc Matrix(rows, cols, type eltType = real)

   Return a matrix (2D array) over domain ``{0..#rows, 0..#cols}``

.. function:: proc Matrix(Dom: domain(2), type eltType = real)

   Return a matrix (2D array) over domain ``Dom`` 

.. function:: proc Matrix(A: [?Dom] ?Atype, type eltType = Atype)

   Return a matrix (2D array) with domain and values of ``A`` 

.. function:: proc Matrix(const Arrays ...?n, type eltType)

   
   Return a matrix (2D array), given 2 or more vectors, such that the vectors
   form the rows of the matrix. In other words, the vectors are
   concatenated such that the ``ith`` vector corresponds to the matrix slice:
   ``A[i, ..]``
   
   If `type` is omitted, it will be inferred from the first array.
   
   For example:
   
   .. code-block:: chapel
   
       var A = Matrix([1, 2, 3],
                      [4, 5, 6],
                      [7, 8, 9]);
       /* Produces the 3x3 matrix of integers:
            1 2 3
            4 5 6
            7 8 9
        */
   

.. function:: proc eye(m, type eltType = real)

   Return a square identity matrix over domain ``{0..#m, 0..m}`` 

.. function:: proc eye(m, n, type eltType = real)

   Return an identity matrix over domain ``{0..#m, 0..#n}`` 

.. function:: proc eye(Dom: domain(2), type eltType = real)

   Return an identity matrix over domain ``Dom`` 

.. function:: proc transpose(A: [?Dom] ?eltType)

   Transpose vector, matrix, or domain.
   
   .. note::
   
      Since row vectors and columns vectors are indistinguishable, passing
      a vector to this function will return that vector unchanged
   

.. method:: proc _array.T

   Transpose vector or matrix 

.. function:: proc matPlus(A: [?Adom] ?eltType, B: [?Bdom] eltType)

   Add matrices, maintaining dimensions 

.. function:: proc matMinus(A: [?Adom] ?eltType, B: [?Bdom] eltType)

   Subtract matrices, maintaining dimensions 

.. function:: proc dot(A: [?Adom] ?eltType, B: [?Bdom] eltType)

   
   Generic matrix multiplication, ``A`` and ``B`` can be a matrix, vector, or
   scalar.
   
   When ``A`` is a vector and ``B`` is a matrix, this function implicitly
   computes ``dot(transpose(A), B)``, which may not be as efficient as
   passing ``A`` and ``B`` in the reverse order.

.. function:: proc inner(A: [?Adom], B: [?Bdom])

   Inner product of 2 vectors 

.. function:: proc outer(A: [?Adom] ?eltType, B: [?Bdom] eltType)

   Outer product of 2 vectors 

.. function:: proc matPow(A: [], b)

   Return the matrix ``A`` to the ``bth`` power, where ``b`` is a positive
   integral type. 

.. function:: proc cross(A: [?Adom] ?eltType, B: [?Bdom] eltType)

   Return cross-product of 3-element vectors ``A`` and ``B`` with domain of
   ``A`` 

.. function:: proc tril(A: [?D] ?eltType, k = 0)

   
   Return lower triangular part of matrix, below the diagonal + ``k``,
   where ``k = 0`` does *not* include the diagonal, and ``k = 1`` includes the
   diagonal
   

.. function:: proc triu(A: [?D] ?eltType, k = 0)

   
   Return upper triangular part of matrix, above the diagonal + ``k``,
   where ``k = 0`` does *not* include the diagonal, and ``k = -1`` includes the
   diagonal
   

.. function:: proc isDiag(A: [?D] ?eltType)

   Return `true` if matrix is diagonal 

.. function:: proc isHermitian(A: [?D])

   Return `true` if matrix is Hermitian 

.. function:: proc isSymmetric(A: [?D]): bool

   Return `true` if matrix is symmetric 

.. function:: proc isTril(A: [?D] ?eltType, k = 0): bool

   
   Return `true` if matrix is lower triangular below the diagonal + ``k``,
   where ``k = 0`` does *not* include the diagonal, and ``k = 1`` includes the
   diagonal
   

.. function:: proc isTriu(A: [?D] ?eltType, k = 0): bool

   Return `true` if matrix is upper triangular above the diagonal + ``k``,
   where ``k = 0`` does *not* include the diagonal, and ``k = -1`` includes the
   diagonal
   

.. function:: proc isSquare(A: [?D])

   Return `true` if matrix is square 

.. function:: proc trace(A: [?D] ?eltType)

   Return the trace of square matrix ``A`` 

